*&---------------------------------------------------------------------*
*&  Include           ZFUNC_BEGIN
*&---------------------------------------------------------------------*

lv_zz_log_is_run = 'X'.

"读取重运行程序的运行ID"
*ASSIGN ('(ZFUNC_LOG)GV_ZZ_LOG_ID')  TO <fs_zz_log_variable>.
*IF <fs_zz_log_variable> IS ASSIGNED.
*  lv_zz_log_id = <fs_zz_log_variable>.
*  UNASSIGN <fs_zz_log_variable>.
*ENDIF.

"读取重运行程序的命令"
*ASSIGN ('(ZFUNC_LOG)GV_NEW_ID') TO <fs_zz_log_variable>.
*IF <fs_zz_log_variable> IS ASSIGNED .
*  lv_zz_log_is_run = <fs_zz_log_variable>.
*  IF <fs_zz_log_variable> IS NOT INITIAL.
*    CLEAR: lv_zz_log_id.
*  ENDIF.
*  UNASSIGN <fs_zz_log_variable>.
*ENDIF.



CLEAR: lt_zz_log_data_save[],lt_zz_log_callstack[].

CALL FUNCTION 'SYSTEM_CALLSTACK'
  IMPORTING
*     callstack    = callstack
    et_callstack = lt_zz_log_callstack.

"read first function name
CLEAR: ls_zz_log_callstack.
READ TABLE lt_zz_log_callstack INTO ls_zz_log_callstack WITH KEY eventtype = 'FUNC'.
IF ls_zz_log_callstack IS INITIAL.
  EXIT.
ENDIF.

SELECT COUNT(*) FROM zfunc_log_stop WHERE funcname = ls_zz_log_callstack-eventname AND stop = 'X'.
IF sy-subrc = 0.
  CLEAR: lv_zz_log_is_run.
ENDIF.

IF lv_zz_log_is_run IS NOT INITIAL. "运行标志"

  CLEAR: lt_zz_log_fupararef[].
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_zz_log_fupararef
    FROM fupararef
   WHERE funcname = ls_zz_log_callstack-eventname.

  "读取BAPI中的输入参数"
  LOOP AT lt_zz_log_fupararef INTO ls_zz_log_fupararef WHERE paramtype NE 'E'.
    CLEAR: ls_zz_log_data_save.
    ls_zz_log_data_save-func_name       = ls_zz_log_callstack-eventname. "函数名称"
    ls_zz_log_data_save-func_paramtype  = ls_zz_log_fupararef-paramtype.
    ls_zz_log_data_save-func_parameter  = ls_zz_log_fupararef-parameter. "参数名称"
    ls_zz_log_data_save-func_structure  = ls_zz_log_fupararef-structure.
    ls_zz_log_data_save-func_defaultval = ls_zz_log_fupararef-defaultval.
    ls_zz_log_data_save-func_type       = ls_zz_log_fupararef-type.
    ls_zz_log_data_save-func_class      = ls_zz_log_fupararef-class.
    ls_zz_log_data_save-func_ref_class  = ls_zz_log_fupararef-ref_class.

    IF ls_zz_log_fupararef-paramtype NE 'T'. "非Table类型数据转换"
      ASSIGN (ls_zz_log_fupararef-parameter) TO <fs_zz_log_variable>.
      IF <fs_zz_log_variable> IS ASSIGNED.
        IF <fs_zz_log_variable> IS NOT INITIAL OR ls_zz_log_fupararef-defaultval IS NOT INITIAL.
          lv_zz_log_string = zui2_json=>serialize( data = <fs_zz_log_variable> compress = abap_true pretty_name = abap_true ).
        ENDIF.
      ENDIF.
    ELSE. "Table 类型数据转换"
*      lv_zz_log_table_name = ls_zz_log_fupararef-parameter && '[]'.
      CONCATENATE ls_zz_log_fupararef-parameter '[]' INTO lv_zz_log_table_name.
      ASSIGN (lv_zz_log_table_name) TO <fs_zz_log_variable_tab>.
      IF <fs_zz_log_variable_tab> IS ASSIGNED.
        IF <fs_zz_log_variable_tab> IS NOT INITIAL.
          lv_zz_log_string = zui2_json=>serialize( data = <fs_zz_log_variable_tab> compress = abap_true pretty_name = abap_true ).
        ENDIF.
      ENDIF.
    ENDIF.

    WHILE STRLEN( lv_zz_log_string ) > 0.
      IF STRLEN( lv_zz_log_string ) >= 255 .
        ls_zz_log_data_save-json_data = lv_zz_log_string.
        APPEND ls_zz_log_data_save TO lt_zz_log_data_save.
        SHIFT lv_zz_log_string BY 255 PLACES.
      ELSE.
        ls_zz_log_data_save-json_data = lv_zz_log_string.
        APPEND ls_zz_log_data_save TO lt_zz_log_data_save.
        CLEAR: lv_zz_log_string.
      ENDIF.
    ENDWHILE.
  ENDLOOP.

  "生成一个log id.
  IF lv_zz_log_id IS INITIAL.
    CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = '01'
      object                  = 'ZFUNC_LOG'
*       QUANTITY                = '1'
*       SUBOBJECT               = ' '
*       TOYEAR                  = '0000'
*       IGNORE_BUFFER           = ' '
    IMPORTING
      number                  = lv_zz_log_id
*       QUANTITY                =
*       RETURNCODE              =
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  ENDIF.


  "网页计算机名称就是IP地址
  CALL 'ThUsrInfo' ID 'OPCODE'   FIELD lv_zz_log_opcode_usr_attr
                   ID 'TERMINAL' FIELD lv_zz_log_terminal.
  lv_zz_log_ip = lv_zz_log_terminal.

*  DATA: lv_zz_log_regex TYPE string.
*  lv_zz_log_regex = '((?:(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))\.){3}(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d))))'.
*  IF NOT contains( val = lv_zz_log_terminal regex = lv_zz_log_regex ).
*    CALL METHOD cl_gui_frontend_services=>get_ip_address
*      RECEIVING
*        ip_address           = lv_zz_log_ip
*      EXCEPTIONS
*        cntl_error           = 1
*        error_no_gui         = 2
*        not_supported_by_gui = 3
*        OTHERS               = 4.
*    IF sy-subrc <> 0.
*      CLEAR: lv_zz_log_ip.
*    ENDIF.
*
*  ELSE.
*    lv_zz_log_ip = lv_zz_log_terminal.
*  ENDIF.

  "赋值抬头
  CLEAR ls_zz_log_save.
  ls_zz_log_save-id         = lv_zz_log_id.
  ls_zz_log_save-func_name  = ls_zz_log_callstack-eventname.
  ls_zz_log_save-erdat      = sy-datum.
  ls_zz_log_save-erzet      = sy-uzeit.
  ls_zz_log_save-ernam      = sy-uname.
  ls_zz_log_save-xuterminal = lv_zz_log_terminal.
  ls_zz_log_save-ip         = lv_zz_log_ip.
  ls_zz_log_save-msgty      = 'I'.
  ls_zz_log_save-msgtxt     = 'SAP Function Start'.
  GET TIME STAMP FIELD ls_zz_log_save-tzntstmps_beg."开始时间戳


  "赋值行项目
  LOOP AT lt_zz_log_data_save INTO ls_zz_log_data_save.
    ls_zz_log_data_save-id = lv_zz_log_id.
    ls_zz_log_data_save-canum = sy-tabix.
    MODIFY lt_zz_log_data_save FROM ls_zz_log_data_save.
    CLEAR ls_zz_log_data_save.
  ENDLOOP.

  "把数据弄成异步提交模式保存，避免事务提交。
  CALL FUNCTION 'ZFUNC_SAVE' STARTING NEW TASK 'ZFUNC_BEGIN'
    EXPORTING
      i_head = ls_zz_log_save
    TABLES
      t_data = lt_zz_log_data_save.


ENDIF.
